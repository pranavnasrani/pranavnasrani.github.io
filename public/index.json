
[{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/developers/","section":"Tags","summary":"","title":"Developers","type":"tags"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/game/","section":"Tags","summary":"","title":"Game","type":"tags"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/geoguessr/","section":"Tags","summary":"","title":"Geoguessr","type":"tags"},{"content":"This was fun and I won the game ","date":"7 December 2024","externalUrl":null,"permalink":"/posts/geoguessr/","section":"Posts","summary":"","title":"GeoGuessr Game Won","type":"posts"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"The best pack for all developers - with amazing tools.\n","date":"7 December 2024","externalUrl":null,"permalink":"/posts/first/","section":"Posts","summary":"","title":"Github Student Developer Pack","type":"posts"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo","type":"tags"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/obsidian/","section":"Tags","summary":"","title":"Obsidian","type":"tags"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/","section":"Pranav Asrani","summary":"","title":"Pranav Asrani","type":"page"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/python/","section":"Tags","summary":"","title":"Python","type":"tags"},{"content":"I don\u0026rsquo;t know why i\u0026rsquo;m making this blog, except for the sole reason of it also acting as my portfolio. However after seeing NetworkChuck\u0026rsquo;s video on his blog pipeline see here, I wanted to do something similar. However I wanted to make it even more seamless than typing the blogs out in Obsidian then using some script to publish it. I wanted to make a GUI python script (since python is so easy to work with). Read on to see how I did that\nThis blog will be a record of all my accomplishments and any other things I find worthy of sharing with the world.\nI have also integrated comments and likes and views into this blog system.\nTrying to automate the task of putting blogs into hugo site template Hey so i\u0026rsquo;m developing a program that will automate the task of taking my notes from obsidian and putting them on the Hugo/Blowfish website. Till now I had to do it manually using terminal but i\u0026rsquo;ve been working on a tkinter python program (cause python is so easy to work with) Trying to automate the task of putting blogs into hugo site template\nThis was my first attempt at it its quite simple and just correctly formats obsidian\u0026rsquo;s markdown files and places them in the site folder without doing any git/github sync and pushes. The final product After a few hours I finally included all the desired functionality and it looks something like this:\ngithub pull/push featured image listing all posts Its neat and convenient and the code is provided below:\nimport os import re import shutil from tkinter import Tk, Label, Entry, Button, filedialog, messagebox, Listbox, Scrollbar, Frame from tkinterdnd2 import TkinterDnD, DND_FILES import subprocess from PIL import Image import json # Global variables featured_image_path = None dropped_files = [] config_file = \u0026#34;config.json\u0026#34; paths = {} def load_or_set_paths(): global paths if os.path.exists(config_file): with open(config_file, \u0026#34;r\u0026#34;) as file: paths = json.load(file) else: user_documents = filedialog.askdirectory(title=\u0026#34;Select Your Documents Directory\u0026#34;) obsidian_vault = filedialog.askdirectory(title=\u0026#34;Select Your Obsidian Vault Directory\u0026#34;) site_repo = filedialog.askdirectory(title=\u0026#34;Select Your Hugo Site Repository Directory\u0026#34;) paths = { \u0026#34;documents\u0026#34;: user_documents, \u0026#34;obsidian_vault\u0026#34;: obsidian_vault, \u0026#34;site_repo\u0026#34;: site_repo } with open(config_file, \u0026#34;w\u0026#34;) as file: json.dump(paths, file) def process_files(): global featured_image_path, dropped_files target_folder_name = target_folder_entry.get() if not target_folder_name.strip(): messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Please enter a folder name.\u0026#34;) return # Define target folder path target_folder = os.path.join(paths[\u0026#34;documents\u0026#34;], \u0026#34;pranavasranisite\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;, target_folder_name) # Check if the target folder exists and replace it if os.path.exists(target_folder): shutil.rmtree(target_folder) # Remove the existing folder # Create a new folder os.makedirs(target_folder, exist_ok=True) first_image_handled = False # Flag to handle the first image duplication for filepath in dropped_files: filename = os.path.basename(filepath) if filename.endswith(\u0026#34;.md\u0026#34;): # Process Markdown files with open(filepath, \u0026#34;r\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: content = file.read() # Find and replace image links images = re.findall(r\u0026#39;\\[\\[([^]]*\\.png)\\]\\]\u0026#39;, content) for image in images: # Preserve the original filename, ensuring spaces are URL encoded as %20 encoded_image = image.replace(\u0026#39; \u0026#39;, \u0026#39;%20\u0026#39;) markdown_image = f\u0026#34;!![Image Description]({encoded_image})\u0026#34; content = content.replace(f\u0026#34;[[{image}]]\u0026#34;, markdown_image) # Handle the first image duplication if not first_image_handled: source_image_path = os.path.join(os.path.dirname(filepath), image) if os.path.exists(source_image_path): target_image_path = os.path.join(target_folder, image) shutil.copy(source_image_path, target_image_path) # Copy the original image first_image_handled = True # Write updated content to new Markdown file in target folder target_md_path = os.path.join(target_folder, \u0026#34;index.md\u0026#34;) with open(target_md_path, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as file: file.write(content) elif filename.endswith((\u0026#34;.png\u0026#34;, \u0026#34;.jpg\u0026#34;, \u0026#34;.jpeg\u0026#34;)): # Copy image files to target folder shutil.copy(filepath, target_folder) # Handle featured image if featured_image_path and os.path.exists(featured_image_path): featured_target_path = os.path.join(target_folder, \u0026#34;featured.png\u0026#34;) # Convert to PNG if not already if not featured_image_path.lower().endswith(\u0026#39;.png\u0026#39;): img = Image.open(featured_image_path) img.save(featured_target_path, \u0026#39;PNG\u0026#39;) else: shutil.copy(featured_image_path, featured_target_path) messagebox.showinfo(\u0026#34;Success\u0026#34;, f\u0026#34;Files processed and saved to:\\n{target_folder}\u0026#34;) # Reset featured image and list of dropped files after processing dropped_files = [] featured_image_path = None dropped_files_label.config(text=\u0026#34;Drop files here\u0026#34;) featured_image_label.config(text=\u0026#34;No image selected\u0026#34;) def select_featured_image(): global featured_image_path initial_dir = paths[\u0026#34;obsidian_vault\u0026#34;] filetypes = [ (\u0026#34;PNG files\u0026#34;, \u0026#34;*.png\u0026#34;), (\u0026#34;JPEG files\u0026#34;, \u0026#34;*.jpg *.jpeg\u0026#34;), (\u0026#34;All image files\u0026#34;, \u0026#34;*.png *.jpg *.jpeg\u0026#34;) ] featured_image_path = filedialog.askopenfilename( initialdir=initial_dir, title=\u0026#34;Select Featured Image\u0026#34;, filetypes=filetypes ) if featured_image_path: featured_image_label.config(text=f\u0026#34;Selected: {os.path.basename(featured_image_path)}\u0026#34;) else: featured_image_label.config(text=\u0026#34;No image selected\u0026#34;) def on_drop(event): global dropped_files dropped_files = event.data.split(\u0026#34; \u0026#34;) dropped_files_label.config(text=\u0026#34;\\n\u0026#34;.join(dropped_files)) def browse_files(): global dropped_files initial_dir = paths[\u0026#34;obsidian_vault\u0026#34;] filetypes = [(\u0026#34;All files\u0026#34;, \u0026#34;*.*\u0026#34;)] selected_files = filedialog.askopenfilenames( initialdir=initial_dir, title=\u0026#34;Select Markdown or Image Files\u0026#34;, filetypes=filetypes ) # Update dropped_files and label dropped_files.extend(selected_files) dropped_files_label.config(text=\u0026#34;\\n\u0026#34;.join(dropped_files)) def push_to_github(): try: # Set the path to the site repository site_path = paths[\u0026#34;site_repo\u0026#34;] # Change to the repository directory os.chdir(site_path) # Run Git commands commands = [ [\u0026#34;git\u0026#34;, \u0026#34;add\u0026#34;, \u0026#34;.\u0026#34;], [\u0026#34;git\u0026#34;, \u0026#34;commit\u0026#34;, \u0026#34;-m\u0026#34;, \u0026#34;Site update\u0026#34;], [\u0026#34;git\u0026#34;, \u0026#34;pull\u0026#34;], [\u0026#34;git\u0026#34;, \u0026#34;push\u0026#34;, \u0026#34;-u\u0026#34;, \u0026#34;origin\u0026#34;, \u0026#34;master\u0026#34;] ] # Execute each command and capture output for cmd in commands: result = subprocess.run(cmd, capture_output=True, text=True, check=True) print(f\u0026#34;Command {\u0026#39; \u0026#39;.join(cmd)} output: {result.stdout}\u0026#34;) # Show success message messagebox.showinfo(\u0026#34;GitHub Push\u0026#34;, \u0026#34;Successfully pushed to GitHub!\u0026#34;) except subprocess.CalledProcessError as e: # Handle Git command errors error_message = f\u0026#34;Git error: {e.stderr}\u0026#34; messagebox.showerror(\u0026#34;GitHub Push Error\u0026#34;, error_message) except Exception as e: # Handle other potential errors messagebox.showerror(\u0026#34;Error\u0026#34;, str(e)) def load_posts(): posts_folder = os.path.join(paths[\u0026#34;documents\u0026#34;], \u0026#34;pranavasranisite\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;) # Print the actual path to debug print(f\u0026#34;Looking for posts in: {posts_folder}\u0026#34;) # Check if the posts folder exists if os.path.exists(posts_folder): # Try to list directories inside the posts folder posts = [f for f in os.listdir(posts_folder) if os.path.isdir(os.path.join(posts_folder, f))] # Debugging: Print the list of posts found if posts: print(f\u0026#34;Found the following posts: {posts}\u0026#34;) else: print(\u0026#34;No post folders found.\u0026#34;) # Clear previous list and load new posts post_listbox.delete(0, \u0026#39;end\u0026#39;) # Clear previous list for post in posts: post_listbox.insert(\u0026#39;end\u0026#39;, post) # Add each post folder to the listbox else: print(f\u0026#34;Post folder does not exist at the path: {posts_folder}\u0026#34;) messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Posts folder not found.\u0026#34;) def delete_post(): selected_post = post_listbox.curselection() if not selected_post: messagebox.showerror(\u0026#34;Error\u0026#34;, \u0026#34;Please select a post to delete.\u0026#34;) return post_name = post_listbox.get(selected_post) posts_folder = os.path.join(paths[\u0026#34;documents\u0026#34;], \u0026#34;pranavasranisite\u0026#34;, \u0026#34;content\u0026#34;, \u0026#34;posts\u0026#34;, post_name) # Confirm deletion if messagebox.askyesno(\u0026#34;Confirm Deletion\u0026#34;, f\u0026#34;Are you sure you want to delete the post: {post_name}?\u0026#34;): shutil.rmtree(posts_folder) # Delete the post folder load_posts() # Reload the post list # Initialize the GUI load_or_set_paths() root = TkinterDnD.Tk() root.title(\u0026#34;Markdown and Image Processor with Post Manager\u0026#34;) root.geometry(\u0026#34;800x800\u0026#34;) # Main layout frame main_frame = Frame(root) main_frame.pack(fill=\u0026#34;both\u0026#34;, expand=True, padx=10, pady=10) # Left column for instructions, file dropping, and target folder left_frame = Frame(main_frame) left_frame.grid(row=0, column=0, sticky=\u0026#34;n\u0026#34;) # Instructions Label(left_frame, text=\u0026#34;Drag and drop Markdown and image files below:\u0026#34;).pack(pady=10) # Drop target area dropped_files_label = Label(left_frame, text=\u0026#34;Drop files here\u0026#34;, bg=\u0026#34;lightgray\u0026#34;, relief=\u0026#34;sunken\u0026#34;, width=50, height=10) dropped_files_label.pack(pady=10) dropped_files_label.drop_target_register(DND_FILES) dropped_files_label.dnd_bind(\u0026#34;\u0026lt;\u0026lt;Drop\u0026gt;\u0026gt;\u0026#34;, on_drop) # Browse files button browse_button = Button(left_frame, text=\u0026#34;Browse Files\u0026#34;, command=browse_files) browse_button.pack(pady=5) # Target folder name input Label(left_frame, text=\u0026#34;Enter new post folder:\u0026#34;).pack(pady=10) target_folder_entry = Entry(left_frame, width=40) target_folder_entry.pack(pady=5) # Featured Image section Label(left_frame, text=\u0026#34;Featured Image:\u0026#34;).pack(pady=5) # Featured image selection button featured_image_button = Button(left_frame, text=\u0026#34;Select Featured Image\u0026#34;, command=select_featured_image) featured_image_button.pack(pady=5) # Label to show selected featured image featured_image_label = Label(left_frame, text=\u0026#34;No image selected\u0026#34;) featured_image_label.pack(pady=5) # Right column for actions and post management right_frame = Frame(main_frame) right_frame.grid(row=0, column=1, sticky=\u0026#34;n\u0026#34;) # Process button process_button = Button(right_frame, text=\u0026#34;Process Files\u0026#34;, command=process_files) process_button.pack(pady=20) # GitHub Push button github_push_button = Button(right_frame, text=\u0026#34;Push to GitHub\u0026#34;, command=push_to_github) github_push_button.pack(pady=20) # Post management section Label(right_frame, text=\u0026#34;Manage Posts:\u0026#34;).pack(pady=10) # Listbox to display posts post_listbox = Listbox(right_frame, width=50, height=10) post_listbox.pack(pady=10) # Scrollbar for the listbox scrollbar = Scrollbar(right_frame, orient=\u0026#34;vertical\u0026#34;, command=post_listbox.yview) scrollbar.pack(side=\u0026#34;right\u0026#34;, fill=\u0026#34;y\u0026#34;) post_listbox.config(yscrollcommand=scrollbar.set) # Load posts button load_button = Button(right_frame, text=\u0026#34;Load Posts\u0026#34;, command=load_posts) load_button.pack(pady=5) # Delete post button delete_button = Button(right_frame, text=\u0026#34;Delete Selected Post\u0026#34;, command=delete_post) delete_button.pack(pady=5) # Start the GUI event loop root.mainloop() Download exe for Windows for automation script\n","date":"7 December 2024","externalUrl":null,"permalink":"/posts/automation_blog/","section":"Posts","summary":"","title":"Setting up the Blog","type":"posts"},{"content":"","date":"7 December 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]